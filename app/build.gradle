plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.ksp)
    alias(libs.plugins.navigation.safeargs)
}

android {
    namespace 'me.hgj.jetpackmvvm.demo'
    compileSdkVersion  36
    defaultConfig {
        applicationId "me.hgj.jetpackmvvm.demo"
        minSdkVersion 23
        targetSdk 36
        versionCode 30
        versionName "2.0.0"
        multiDexEnabled true

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    signingConfigs {
        release {
            storeFile file('cxk.jks')
            storePassword 'cxk666'
            keyAlias 'kunkun'
            keyPassword 'cxk666'
            v1SigningEnabled true //是否开启V1签名
            v2SigningEnabled true //是否开启V2签名
        }
    }

    buildTypes {
        debug {
            minifyEnabled false //关闭混淆
            shrinkResources false
            zipAlignEnabled false
            // 签名信息配置
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true //开启混淆
            shrinkResources true
            zipAlignEnabled true
            // 签名信息配置
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlin {
        jvmToolchain(17) // 自动设置 Java 17 兼容性
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //基础库
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.activity)
    implementation(libs.androidx.fragment.ktx)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.multidex)
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.preference.ktx

    // JetpackMvvm 框架不再引入navigation，大家想用navigation的话就自己引入，我这里是历史遗留用的是navigation，所以demo示例引入了
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    //项目核心框架
//    implementation project(path: ':JetpackMvvm')
    implementation libs.jetpackmvvm

    //================================网络框架 sart ===========================//
    //网络请求，JetpackMvvm 框架不再内置引入网络框架，大家可以自行选择Retrofit或者其他优秀的第三方网络框架 比如RxHttp，Net等 这里我使用了我常用的RxHttp框架作为示例
    implementation libs.okhttp //必须
    implementation libs.rxhttp
    ksp libs.rxhttp.compiler
    //================================网络框架 end ===========================//

    //================================demo项目相关使用到的库 sart ===========================//
    implementation libs.dialog.bootomsheets
    //轮播图
    implementation libs.banner
    //lottie动画
    implementation libs.lottie
    //指示器库
    implementation libs.magicindicator
    //加载webview
    implementation libs.agentweb
    implementation libs.filechooser
    implementation libs.downloader
    //RevealLayout 收藏的 红心
    implementation libs.reveallayout
    //屏幕适配
    implementation libs.autosize
    //防崩溃
    implementation libs.customactivityoncrash
    //================================demo项目相关使用到的库 end ===========================//
}